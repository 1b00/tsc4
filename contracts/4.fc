{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

;; only work with a-zA-Z letters. all the other ones should be ignored.
;; Yes, put 32 bits in beginning of result.
;; ASCII characters are 8 bit
;; Caesar cipher text can be split across different cells or only one cell? - yes. Take a look at the link in the task description
;; Case remains the same. For example: x -> a
;; How to receive one character from slice?
;; - ~load_uint(8)
;; int bit = tSlice~load_uint(8);
;; body~store_uint(bit, 8);
;; 1- Does the input of enc have 32 bits 0 prefix? - yes
;; 2- Does the input of dec have 32 bits 0 prefix? - yes
;; 3- Does the output of enc have 32 bits 0 prefix? - yes
;; 4- Does the output of dec have 32 bits 0 prefix? - yes
;; Is the entire message in one cell? - NO
;; ASCII is from 0 to 255.Only letters .
;; my problem was that i stored all my references in a tuple and in some cases it overflowed
;; The correct statement would sound as follows:
;;   The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
;;   where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the alphabet so that the last ASCII
;;   character (Z) should go to the beginning (C). Return new text encoded in cell with the same x{00000000} prefix flag.
;;  - Thanks a lot for clarification! But why C is at the beginning? Shouldnt it be A??
;; 3. there are no prefix zeros like in task4 - Correct
;; you canâ€™t store a char in different cells
;;
;; tuple list_of_cells = empty_tuple();
;; list_of_cells~cons(cell1);
;; list_of_cells~cons(cell2);
;; ;; reading it
;; list_of_cells~list_next();
;; No, from 0 to 255, but Latin from 32 to 126. Note, that lower and upper cases must be handled separatelly
;; Don't misguide other participants. Latin are from 65 to 90 for uppercase and from 97 to 122 for lowercase.

;; GasValue: 364424013
;; Points: 5.619197559295318
;; GasValue: 366932710
;; Points: 5.61715775004039
;; GasValue: 365710931
;; Points: 5.618150331797134
() recv_internal() {
}

(cell) caesar_cipher(int shift, cell text) {
  int LETTERS = 26;
  shift = shift % LETTERS;
  ;; if (shift == 0) { return text; }
  slice text_s = text.begin_parse();
  int DEPTH = slice_depth(text_s);
  builder result = begin_cell();
  int i = 0;
  while (i <= DEPTH) {
    int ref_count = DEPTH;
    slice s = text_s;
    repeat (ref_count - i) {
      s = s~load_ref().begin_parse();
    }
    builder tmp = begin_cell();
    if (ref_count == i) {
      int op = s~load_uint(32);
      tmp = tmp.store_uint(op, 32);      
    }
    repeat (slice_bits(s) / 8) {
      int char = s~load_uint(8);
      if (char >= 65) & (char <= 90) {
        ;; char = ((char + shift - 65) % LETTERS + 65);
        char = char + shift;
        if (char > 90) { char = char - LETTERS; }
      } elseif (char >= 97) & (char <= 122) {
        ;; char = ((char + shift - 97) % LETTERS + 97);
        char = char + shift;
        if (char > 122) { char = char - LETTERS; }
      }
      tmp = tmp.store_uint(char, 8);
    }
    if (i == 0) {
      result = tmp;
    } else {
      result = tmp.store_ref(result.end_cell());
    }
    i = i + 1;
  }
  return result.end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  return caesar_cipher(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return caesar_cipher(26 - shift % 26, text);
}

