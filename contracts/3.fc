{- 
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref.
  Write the method that find and replaces one flags in the binary string
  with another value. Flags and values can be can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Flag and the value may be of different lengths.
  When there are overlapping flags, only the first one
  from the overlap needs to be replaced (for example, if the flag is 101,
  value is 111, and string is 10101, then the result would be 11101, but if
  the string is 1010101, then the result would be 1110111).
  Every cell in the input linked list, except for the last one
  (the one that is the deepest in the tree), is guaranteed to be full
  (guaranteed to contain 1023 bits).
  The requirements on the output cell are more loose - only the concatenation of bits
  from the linked list needs to match that of the expected answer, but the structure
  itself may be different (for example, for the purposes of comparing the answer,
  a cell with bit 1 and a ref containing bits 10 is the same as a cell containing
  bit 11 and a ref with bit 0 - they both make up a bitstring 110).
  Lets give a simple example. We have the target flag 101110101 and the value
  to be written 111111111 as inputs, and a linked list of cells, in which the bit
  value of the first cell ends with ...10100001011, and in the ref we have cell that
  starts with 10101000111111...
  The output should be a linked list where the first
  cell ends with ...10100001111, and the second cell starts with 11111000111111...

-}

(int) tlen (tuple t) asm "TLEN";
(int) ubitsize (int num) asm "UBITSIZE";
forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) ~tpush(tuple t, X value) asm "TPUSH";
forall X -> (tuple, X) ~tpop(tuple t) asm "TPOP";

() recv_internal() {
}

;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
  int flag_len = ubitsize(flag);
  int value_len = ubitsize(value);
  slice curr = linked_list.begin_parse();
  slice next = null();
  builder result = begin_cell();
  int result_bits = 0;
  int MAX_CELL_BITS = 1023;
  tuple stack = empty_tuple();
  int init = -1;
  repeat (slice_depth(curr) + 1) {
    curr = init ? curr : next; init = 0;
    int curr_len = slice_bits(curr);
    next = curr.slice_refs() ? curr~load_ref().begin_parse() : null();
    int next_len = next.is_null() ? 0 : slice_bits(next);
    while (curr_len) {
      int needle = 0;
      int tail_len = flag_len - curr_len;
      if (tail_len > 0) {
        needle = curr.preload_uint(curr_len);
        if (next_len > 0) {
          needle <<= tail_len;
          needle += next.preload_uint(tail_len);
        }
      } else {
        needle = curr.preload_uint(flag_len);
      }
      if (needle == flag) {
        if (tail_len > 0) {
          curr~load_uint(curr_len);
          if (next_len > 0) {
            next~load_uint(tail_len);
          }
        } else {
          curr~load_uint(flag_len);
        }
        if (result_bits + value_len > MAX_CELL_BITS) {
          stack~tpush(result);
          result = begin_cell();
          result_bits = 0;
        }
        result = result.store_uint(value, value_len);
        result_bits += value_len;
      } else {
        if (result_bits == MAX_CELL_BITS) {
          stack~tpush(result);
          result = begin_cell();
          result_bits = 0;
        }
        int ppss = curr~load_uint(1);
        result = result.store_uint(ppss, 1);
        result_bits += 1;
      }
      curr_len = slice_bits(curr);
    }
  }
  while (stack.tlen() > 0) {
    result = stack~tpop().store_ref(result.end_cell());
  }
  return result.end_cell();
}

