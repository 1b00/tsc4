{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

;; GasValue: 2481151
;; Points: 5.295680971283039
;; GasValue: 942234
;; Points: 5.629566442602379

forall X -> (tuple, ()) ~tpush(tuple t, X value) asm "TPUSH";

() recv_internal() {
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  tuple result = empty_tuple();
  int f = 0;
  if (0 == n) { result~tpush(f); k -= 1; n += 1; if (k == 0) { return result; } }
  int s = 1;
  if (1 >= n) { result~tpush(s); k -= 1; n += 1; if (k == 0) { return result; } }
  int t = f + s;
  if (2 >= n) { result~tpush(t); k -= 1; n += 1; if (k == 0) { return result; } }
  repeat (n - 3) { f = s; s = t; t = f + s; }
  repeat (k    ) { f = s; s = t; t = f + s;
    result~tpush(t);
  }
  return result;
}

