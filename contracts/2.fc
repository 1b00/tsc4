{-
  TASK 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}

(int) tlen (tuple t) asm "TLEN";
forall X -> tuple tpush(tuple t, X value) asm "TPUSH";
forall X -> (tuple, ()) ~tpush(tuple t, X value) asm "TPUSH";

() recv_internal() {
}

;; testable
(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {
  ;; validate correct size of matrixes
  int lenN = matrixA.tlen();
  int lenM = matrixA.at(0).tlen();
  int lenP = matrixB.at(0).tlen();
  ;; if (lenN < 4) { return null(); }
  ;; if (lenN > 32) { return null(); }
  ;; if (lenM < 4) { return null(); }
  ;; if (lenM > 32) { return null(); }
  ;; if (lenP < 4) { return null(); }
  ;; if (lenP > 32) { return null(); }
  ;; if (matrixB.tlen() != lenM) { return null(); }
  ;; int i = 0;
  ;; while (i < lenN) {
  ;;   if (matrixA.at(i).tlen() != lenM) { return null(); }
  ;;   i = i + 1;
  ;; }
  ;; int k = 0;
  ;; while (k < lenM) {
  ;;   if (matrixB.at(k).tlen() != lenP) { return null(); }
  ;;   k = k + 1;
  ;; }

  ;; calculate matrix
  tuple matrixC = empty_tuple();
  int i = 0;
  int j = 0;
  int k = 0;
  int cellC = 0;
  while (i < lenN) {
      j = 0;
      tuple matrixC_row = empty_tuple();
      while (j < lenP) {
        cellC = 0;
        k = 0;
        while (k < lenM) {
          cellC = cellC + matrixA.at(i).at(k) * matrixB.at(k).at(j);

          k = k + 1;
        }
        matrixC_row~tpush(cellC);
          
        j = j + 1;
      }
      matrixC~tpush(matrixC_row);

      i = i + 1;
  }

  return matrixC;
}

